{"version":3,"sources":["components/TodoItems.jsx","components/Todos.jsx","components/layouts/header.jsx","components/pages/about.jsx","components/AddTodo.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItems","getStyle","background","padding","borderBottom","textDecoration","props","todo","compeleted","markComplete","e","console","log","this","id","title","style","type","onChange","bind","Button","onClick","delTodo","variant","size","float","borderRadius","Component","Todos","todos","map","key","titleStyle","color","textAlign","linkStyle","Header","to","about","Fragment","AddTodo","state","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ae81ff0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\nexport class TodoItems extends Component {\r\n\r\n    getStyle = () => {\r\n        return {\r\n            background: \"#f4f4f4\",\r\n            padding: \"10px\",\r\n            borderBottom: \"1px #ccc dotted\",\r\n            textDecoration: this.props.todo.compeleted ? \"line-through\" : \"none\"\r\n        }\r\n        \r\n    }\r\n\r\n    markComplete = (e) => {\r\n        console.log(this.props) \r\n    }\r\n\r\n    render() {\r\n        const {id,title} = this.props.todo;\r\n        return (\r\n            <div style= { this.getStyle() }>\r\n\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/> {}\r\n                    {title}                    \r\n                    <>\r\n                    <Button onClick={this.props.delTodo.bind(this,id)} variant=\"danger\" size=\"sm\" style={{float:\"right\", borderRadius: \"50%\"}}>X</Button>{' '}\r\n                    </></p>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n//Prop Types\r\nTodoItems.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n\r\n  }\r\n\r\n  \r\nexport default TodoItems;\r\n","import React, {Component} from 'react';\r\nimport TodoItems from \"./TodoItems\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n\r\n  render(){\r\n    return this.props.todos.map((todo) => (\r\n    <TodoItems key={todo.id}  todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\n//Prop Types\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n    return(\r\n        <header style={titleStyle}>\r\n        <h1 >Todo List </h1>\r\n        <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst titleStyle = {\r\n    background: \"#333\",\r\n    color: \"#fff\",\r\n    textAlign: \"center\",\r\n    padding: \"10px\"\r\n}\r\n\r\nconst linkStyle = {\r\n    color: \"white\",\r\n    textDecoration: \"none\"\r\n}\r\nexport default Header;","import React from 'react'\r\n\r\n function about() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is a simple to do list app v1.000 designed and developed by Ashish Pokhrel from react. <br>\r\n            </br>&copy; Ashish Pokhrel | 0boltar1 2020</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default about;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: \"\"\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState( {[e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState ({title: \"\"});\r\n    }    \r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display:\"flex\"}}>\r\n                <input type=\"text\"\r\n                 name=\"title\" \r\n                 placeholder=\"Add todo ...\"\r\n                 style={{flex: \"10\", padding: \"5px\"}}\r\n                 value= {this.state.title}\r\n                 onChange={this.onChange}\r\n                />\r\n\r\n                <input type=\"submit\" \r\n                value=\"submit\"\r\n                className=\"btn\"\r\n                style={{flex: \"1\"}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n//Prop Types\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired,\r\n\r\n  }\r\n\r\n\r\nexport default AddTodo;\r\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Todos from \"./components/Todos\";\nimport Header from \"./components/layouts/header\";\nimport about from \"./components/pages/about\";\nimport AddTodo from \"./components/AddTodo\";\n// import {v4 as uuid} from \"uuid\";\nimport axios from \"axios\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount(){\n      axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n      .then(res => this.setState({ todos: res.data})\n      )\n  }\n\n  //Mark Toggle\n  markComplete = (id) => {\n    this.setState( { todos: this.state.todos.map (todo => {\n      if (todo.id === id){\n        todo.compeleted= !todo.compeleted\n      }\n      return todo;\n    })})\n    \n  }\n\n  //Delete Todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res => this.setState ({ todos: [...this.state.todos.filter( todo =>\n      todo.id !== id\n    )]}));\n    \n    \n  }\n\n  //Add Todo\n  addTodo = (title) =>{\n   axios.post(\"https://jsonplaceholder.typicode.com/todos\",{\n   title,\n    compeleted: false\n  })\n   .then(res => this.setState ({todos: [...this.state.todos, res.data]})\n   );\n    \n    \n  }\n\n  render(){\n    return (\n      <Router>\n          <div className=\"App\">\n            <div className=\"container\">\n                < Header />\n                <Route exact path=\"/\" render = {props => (\n                  <React.Fragment>\n                  <AddTodo addTodo={this.addTodo}/>\n                  <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n                  </React.Fragment>\n                )} />\n                <Route path=\"/about\" component={about} />\n            </div>\n          </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}